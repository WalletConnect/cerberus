
name: ci

on:
  release:
    types: ["published"]

  pull_request:
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'README.md'

  push:
    branches: ['main']
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'README.md'

  workflow_dispatch:

concurrency:
  # Support push/pr as event types with different behaviors each:
  # 1. push: queue up builds
  # 2. pr: only allow one run per PR
  group: ${{ github.workflow }}-${{ github.event.type }}${{ github.event.pull_request.number }}
  # If there is already a workflow running for the same pull request, cancel it
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  RUST_BACKTRACE: full

jobs:
  clippy:
    name: "Clippy (features=${{ matrix.features }})"
    strategy:
      matrix:
        features: ["default", "full", "cache", "metrics"]
    runs-on: ubuntu-latest

    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3

      - name: "Install Rust (stable/minimal)"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: "Cache cargo registry"
        uses: Swatinem/rust-cache@v2
        continue-on-error: false

      - name: "Clippy"
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --features ${{ matrix.features }} --tests -- -D warnings

  check-formatting:
    name: "Check Formatting"
    runs-on: ubuntu-latest

    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3

      - name: "Install Rust (nightly/default)"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: default
          override: true

      - name: "Cache cargo registry"
        uses: Swatinem/rust-cache@v2
        continue-on-error: false

      - name: "Check Formatting "
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  test:
    name: "Unit Tests (features=${{ matrix.features }})"
    strategy:
      matrix:
        os: [ubuntu-latest]
        features: ["default", "full", "cache", "metrics"]
    runs-on: ${{ matrix.os }}

    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3

      - name: "Install Rust (stable/minimal)"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: "Cache cargo registry"
        uses: Swatinem/rust-cache@v2
        with:
          sharedKey: "tests"
        continue-on-error: false

      - name: "Unit Tests"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --features ${{ matrix.features }}
